{"version":3,"sources":["components/ZipCard.js","components/ZipCode.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["ZipCard","props","state","key","city","location","population","wages","this","className","Component","ZipCode","zipCode","data","isFound","zip","url","axios","get","then","response","setState","catch","error","console","log","prevProps","generateZipCards","cards","forEach","element","index","City","State","Lat","Long","EstimatedPopulation","TotalWages","push","toString","SearchBar","handleSubmit","event","preventDefault","prevSearch","target","searchbar","value","hasSearched","reset","onSubmit","type","name","id","placeholder","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.35b6cfe2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class ZipCard extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            key: props.key,\r\n            city: props.city,\r\n            state: props.state,\r\n            location: props.location,\r\n            population: props.population,\r\n            wages: props.wages\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        let props = this.props;\r\n        const key = props.key;\r\n        const city = props.city !== \"\" ? props.city : \"N/A\";\r\n        const state = props.state !== \"\" ? props.state : \"N/A\";\r\n        const location = props.location !== \"\" ? props.location : \"N/A\";\r\n        const population = props.population !== \"\" ? props.population : \"N/A\";\r\n        const wages = props.wages !== \"\" ? props.wages : \"N/A\";\r\n\r\n        return (\r\n            <section className=\"zip-card\" key={key}>\r\n                <h3 className=\"zip-card-title\">{city}, {state}</h3>\r\n                <ul className=\"zip-card-details\">\r\n                    <li>State: {state}</li>\r\n                    <li>Location: ({location})</li>\r\n                    <li>Populated (estimated): {population}</li>\r\n                    <li>Total Wages: {wages}</li>\r\n                </ul>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nZipCard.propTypes =\r\n{\r\n    key: PropTypes.string.isRequired,\r\n    city: PropTypes.string.isRequired,\r\n    state: PropTypes.string.isRequired,\r\n    location: PropTypes.string.isRequired,\r\n    population: PropTypes.string.isRequired,\r\n    wages: PropTypes.string.isRequired\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport axios from 'axios';\r\n\r\nimport ZipCard from './ZipCard';\r\n\r\nexport default class ZipCode extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            zipCode: props.zipCode,\r\n            data: [],\r\n            isFound: false\r\n        }\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        const zip = this.state.zipCode;\r\n        const url = `https://ctp-zip-api.herokuapp.com/zip/${zip}`;\r\n\r\n        axios.get(url)\r\n        .then((response) =>\r\n        {\r\n            const data = response.data;\r\n\r\n            this.setState({ data, isFound: true });\r\n        })\r\n        .catch((error) => \r\n        {\r\n            console.log(error);\r\n            this.setState({ data: [], isFound: false });\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        if(this.props.zipCode !== prevProps.zipCode)\r\n        {\r\n            const zip = this.props.zipCode;\r\n            const url = `http://ctp-zip-api.herokuapp.com/zip/${zip}`;\r\n\r\n            axios.get(url)\r\n            .then((response) =>\r\n            {\r\n                const data = response.data;\r\n\r\n                this.setState({ data, isFound: true });\r\n            })\r\n            .catch((error) => \r\n            {\r\n                console.log(error);\r\n                this.setState({ data: [], isFound: false });\r\n            });\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            this.state.isFound ?\r\n            <section className=\"zip-card-grid\">\r\n                {this.generateZipCards(this.state.data)}\r\n            </section>\r\n            : <p>No results found</p>\r\n        );\r\n    }\r\n\r\n    generateZipCards(data)\r\n    {\r\n        let cards = [];\r\n\r\n        data.forEach((element, index) => \r\n        {\r\n            const city = element.City;\r\n            const state = element.State;\r\n            const location = `${element.Lat}, ${element.Long}`;\r\n            const population = element.EstimatedPopulation;\r\n            const wages = element.TotalWages;\r\n\r\n            cards.push(<ZipCard \r\n                key={index.toString()}\r\n                city={city} \r\n                state={state}\r\n                location={location}\r\n                population={population}\r\n                wages={wages}\r\n            />);\r\n        });\r\n\r\n        return cards;\r\n    }\r\n}\r\n\r\nZipCode.propTypes =\r\n{\r\n    zipCode: PropTypes.string.isRequired\r\n}","import React, { Component } from 'react';\r\n\r\nimport ZipCode from './ZipCode';\r\n\r\nexport default class SearchBar extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            prevSearch: \"Try 10016\",\r\n            hasSearched: false\r\n        }\r\n    }\r\n\r\n    handleSubmit = (event) =>\r\n    {\r\n        // Prevent browser reload/refresh\r\n        event.preventDefault();\r\n\r\n        this.setState({ prevSearch: event.target.searchbar.value, hasSearched: true });\r\n        event.target.reset();\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n            this.state.hasSearched ?\r\n            <section>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div>Zip Code</div>\r\n                    <input type=\"text\" name=\"searchbar\" id=\"searchbar\" placeholder={this.state.prevSearch} />\r\n                </form>\r\n                <ZipCode zipCode={this.state.prevSearch}/>\r\n            </section>\r\n            :\r\n            <section>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div>Zip Code</div>\r\n                    <input type=\"text\" name=\"searchbar\" id=\"searchbar\" placeholder={this.state.prevSearch} />\r\n                </form>\r\n            </section>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\n\nimport SearchBar from './components/SearchBar';\n\nfunction App() \n{\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Zip Code Search</h1>\n                <SearchBar />\n            </header>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}